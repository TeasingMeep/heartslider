class HeartSlider {
	constructor(t) {
		this.reset(t);
	}
	reset(t) {
		var e = this;
		for (var i in ((e.settings = {
			buttons: !1,
			clickToAdvance: !1,
			delay: 1e3,
			effect: "fadeOut",
			loop: !0,
			manualTransition: 400,
			paused: !1,
			pauseOnInactiveWindow: !1,
			progressive: !0,
			randomize: !1,
			slideshow: ".heart-slideshow",
			slides: ".heart-slide",
			swipe: !0,
			transition: 3e3,
			progressIndicators: { enable: !1, type: "dash", clickable: !0, color: "#fff" },
		}),
		t))
			if (this.settings.hasOwnProperty(i))
				if ("object" == typeof t[i] && "slideshow" !== i) {
					t[i].enable = !0;
					for (const e in t[i]) {
						const s = t[i][e];
						this.settings[i].hasOwnProperty(e) && (this.settings[i][e] = s);
					}
				} else this.settings[i] = t[i];
		if (((this.slideshowSelector = "object" == typeof e.settings.slideshow ? e.settings.slideshow : document.querySelector(e.settings.slideshow)), !this.slideshowSelector)) return !1;
		if ((this.slideshowSelector.classList.contains("heart-slideshow") || this.slideshowSelector.classList.add("heart-slideshow"), (this.slides = Array.prototype.slice.apply(this.slideshowSelector.querySelectorAll(this.settings.slides))), 0 === this.slides.length)) {
			const t = this.slideshowSelector.children;
			this.slides = [...t].filter((t) => "BUTTON" !== t.tagName);
		}
		if (
			((this.total = this.slides.length),
			(this.index = 0),
			this.manualTimeout,
			(this.originallyPaused = this.settings.paused),
			this.settings.randomize && (this.index = Math.floor(Math.random() * this.total)),
			this.settings.progressive && this.progressiveLoad(this.index, !0, this),
			(this.firstIndex = this.index),
			this.slides.forEach(function (t, i) {
				i !== e.firstIndex && (t.setAttribute("aria-hidden", "true"), t.setAttribute("tab-index", "-1")), t.classList.contains("heart-slide") || t.classList.add("heart-slide"), e.settings.swipe && t.setAttribute("draggable", "true");
			}),
			this.goToSlide(this.firstIndex, !1, !0),
			this.slides.length < 2)
		)
			return !1;
		e.settings.progressive ||
			setTimeout(function () {
				e.slideshowSelector.classList.add("progressive-loading-disabled"), e.kickstart();
			}, 100);
		var s = function t() {
				return e.heartVisibilityHandler(e);
			},
			n;
		(e.settings.pauseOnInactiveWindow && document.addEventListener("visibilitychange", s, !0),
		e.settings.swipe && (e.slideshowSelector.addEventListener("touchstart", e.swipeHandler(e).handleTouchStart, { passive: !0 }), e.slideshowSelector.addEventListener("touchmove", e.swipeHandler(e).handleTouchMove, { passive: !0 })),
		e.settings.clickToAdvance) &&
			e.slideshowSelector.addEventListener(
				"click",
				function (t) {
					n ||
						"BUTTON" === t.target.nodeName ||
						(e.pause(),
						e.next(e, !0, !1, !0),
						(n = setTimeout(function () {
							n = void 0;
						}, e.settings.manualTransition)),
						e.originallyPaused ||
							(e.throttleClickResume && clearTimeout(e.throttleClickResume),
							(e.throttleClickResume = setTimeout(function () {
								e.resume();
							}, e.settings.transition + 1.25 * e.settings.delay))));
				},
				!1
			);
		if (this.settings.progressIndicators && this.settings.progressIndicators.enable) {
			const t = this.slideshowSelector.querySelector(".progress-container") ? this.slideshowSelector.querySelector(".progress-container") : document.createElement("div");
			t.classList.add("progress-container");
			const i = this.settings.progressIndicators.type || "dash";
			t.classList.add("type-" + i);
			const s = this.settings.progressIndicators.color || "#fff";
			("#fff" === s && "#ffffff" === s && "white" === s && "rgb(255, 255, 255)" === s && "rgba(255, 255, 255, 1)" === s) || t.style.setProperty("--indicator-color", s);
			const o = this.settings.progressIndicators.clickable ? "button" : "div";
			t.style.setProperty("--total", this.total), t.childElementCount > 0 && (t.innerHTML = "");
			for (let i = 0; i < this.total; i++) {
				const s = document.createElement(o);
				s.classList.add("indicator"),
					s.setAttribute("data-index", i),
					s.addEventListener("click", (t) => {
						if (i === this.index) return;
						e.pause();
						const s = !0,
							o = !1,
							r = !0;
						e.goToSlide(i, !0, !1, !0),
							(n = setTimeout(function () {
								n = void 0;
							}, e.settings.manualTransition)),
							e.originallyPaused ||
								(e.throttleClickResume && clearTimeout(e.throttleClickResume),
								(e.throttleClickResume = setTimeout(function () {
									e.resume();
								}, e.settings.transition + 1 * e.settings.delay)));
					}),
					t.appendChild(s);
			}
			this.slideshowSelector.appendChild(t),
				(this.progressContainerSelector = t),
				(this.progressIndicators = t.querySelectorAll(".indicator")),
				window.requestAnimationFrame(() => {
					this.progressIndicators[this.firstIndex].classList.add("active", "first");
				});
		}
		const o = e.slideshowSelector.querySelectorAll("button[class*='heart-']");
		if (e.settings.buttons || 2 === o.length) {
			function r(t) {
				n ||
					(e.pause(),
					t.classList.contains("heart-next") ? e.next(e, !0, !1, !0) : t.classList.contains("heart-prev") && e.previous(e, !0, !1, !0),
					(n = setTimeout(function () {
						n = void 0;
					}, 200)));
			}
			if (0 === o.length) {
				const t = ["heart-prev", "heart-next"];
				for (var a = 0; a < t.length; a++) {
					var l = document.createElement("button");
					l.classList.add(t[a]),
						l.setAttribute("aria-label", t[a].replace("heart-", "")),
						l.setAttribute("tab-index", "0"),
						l.addEventListener(
							"click",
							function (t) {
								r(t.currentTarget);
							},
							!1
						),
						e.slideshowSelector.appendChild(l);
				}
			} else
				for (const t of o) {
					t.setAttribute("tab-index", "0");
					const e = t.classList.contains("heart-prev") ? "prev" : "next";
					t.setAttribute("aria-label", e),
						t.addEventListener(
							"click",
							function (t) {
								r(t.currentTarget);
							},
							!1
						);
				}
		}
	}
	kickstart() {
		const t = this;
		if (t.settings.progressive) {
			t.slideshowSelector.classList.add("first-image-loaded"), t.firstImageLoaded && t.firstImageLoaded(t);
			var e = function e() {
				setTimeout(function () {
					t.progressiveLoad((t.firstIndex + 1 + t.total) % t.total);
				}, t.settings.delay);
			};
			window.requestAnimationFrame(e);
		}
		t.settings.paused ||
			(t.kickoffTimer = setTimeout(function () {
				t.resume(), (t.kickoffTimer = void 0);
			}, 0.5 * t.settings.delay + t.settings.transition));
	}
	on(t, e) {
		const i = this,
			s = ["transitionStart", "transitionEnd", "firstImageLoaded"];
		if (s.includes(t))
			if ("function" == typeof e) {
				function n(i) {
					let s = new CustomEvent(t, { detail: { slideshow: i } });
					i.slideshowSelector.dispatchEvent(s), e(s.detail.slideshow, s.detail.slideshow.slideshowSelector, s.detail.slideshow.currentSlide);
				}
				"transitionStart" === t &&
					(i.transitionStart = function (t) {
						n(t);
					}),
					"transitionEnd" === t &&
						(i.transitionEnd = function (t) {
							n(t);
						}),
					"firstImageLoaded" === t &&
						(i.firstImageLoaded = function (t) {
							console.log("first image is loaded"), n(t);
						});
			} else console.warn("Your second argument for " + t + " must be a function.");
		else console.warn('"' + t + '" is not a valid event. Try one of these:', s);
	}
	swipeHandler(t) {
		function e(t) {
			return t.touches || t.originalEvent.touches;
		}
		function i(t) {
			const i = e(t)[0];
			(this.xDown = i.clientX), (this.yDown = i.clientY);
		}
		function s(e) {
			if (this.xDown && this.yDown) {
				var i = e.touches[0].clientX,
					s = e.touches[0].clientY,
					n = this.xDown - i,
					o = this.yDown - s;
				Math.abs(n) > Math.abs(o) && (n > 0 ? (e.preventDefault(), t.pause(), t.next(t, !0, !1, !0)) : (e.preventDefault(), t.pause(), t.previous(t, !0, !1, !0))), (this.xDown = null), (this.yDown = null);
			}
		}
		return (this.xDown = null), (this.yDown = null), { getTouches: e, handleTouchStart: i, handleTouchMove: s };
	}
	heartVisibilityHandler(t) {
		void 0 === t && (t = this),
			null !== t &&
				t.settings.pauseOnInactiveWindow &&
				null !== t.settings.slideshow &&
				("hidden" == document.visibilityState
					? (console.log("%cWindow Lost Focus. HeartSlider is Paused.", "font-style: italic; font-size: 0.9em; color: #757575; padding: 0.2em;"), t.pause())
					: (console.log("%cRegained Focus. Resumed HeartSlider.", "font-style: italic; font-size: 0.9em; color: #6F9F67; padding: 0.2em;"), t.resume()));
	}
	goToSlide(t, e, i, s) {
		if ((void 0 === e && (e = !1), void 0 === i && (i = !1), void 0 === s && (s = !1), this.transitioning && !s)) return !1;
		if (!this.settings.loop && !i && t === this.firstIndex) return this.pause(), !1;
		(this.transitioning = !0), null !== this.slides[t] && this.slides[t].querySelector("video") && this.clearAllTimers();
		var n = this;
		this.previousSlide = this.slides[this.index];
		var o = (t + this.total) % this.total;
		this.currentSlide = this.slides[o];
		const r = this.progressContainerSelector,
			a = this.progressIndicators;
		if (void 0 !== r && a.length > 0) {
			const t = a[o],
				e = r.querySelectorAll(".active");
			for (const t of e) t.classList.remove("active", "first");
			t.classList.add("active");
		}
		var l = e || i || s ? n.settings.manualTransition : n.settings.transition;
		function d() {
			let t = 1;
			if (n.previousSlide === n.currentSlide && s) {
				clearTimeout(n.manualTimeout), clearInterval(n.slideInterval);
				const e = window.getComputedStyle(n.previousSlide).opacity;
				(t = 1 - e),
					(n.previousSlide.style.opacity = e),
					(n.previousSlide.style.transition = "none"),
					setTimeout(function () {
						(n.previousSlide.style.transition = "opacity"), (n.previousSlide.style.transitionDelay = "0ms"), (n.previousSlide.style.transitionDuration = l * t + "ms"), (n.previousSlide.style.opacity = null);
					}, 16.6667);
			} else n.previousSlide !== n.currentSlide && ((n.previousSlide.style.transitionDelay = l + "ms"), (n.previousSlide.style.transitionDuration = "0ms"), n.previousSlide.classList.remove("active"));
			const e = n.currentSlide.querySelector("video");
			if (null !== e) {
				function o(t) {
					const e = n.settings.delay + 2 * n.settings.transition,
						i = Math.max(1e3 * t.duration - e, 0);
					i >= 0 &&
						(n.pause(),
						n.videoSlideTimer && clearTimeout(n.videoSlideTimer),
						(n.videoSlideTimer = setTimeout(function () {
							n.resume();
						}, i + n.settings.transition)));
				}
				(e.currentTime = 0),
					e.play(),
					e.duration && "number" == typeof e.duration
						? o(e)
						: (e.onloadedmetadata = function () {
								o(e);
						  });
			}
			(n.currentSlide.style.transitionDelay = "0ms"),
				(n.currentSlide.style.transitionDuration = l + "ms"),
				n.currentSlide.removeAttribute("aria-hidden"),
				n.currentSlide.removeAttribute("tab-index"),
				n.currentSlide.classList.add("active"),
				n.transitionEndTimer && clearTimeout(n.transitionEndTimer),
				n.transitionStart && n.transitionStart(n),
				(n.transitionEndTimer = setTimeout(function () {
					if (((n.previousSlide.style.transitionDelay = "0ms"), (n.previousSlide.style.transitionDuration = "0ms"), !i)) {
						n.previousSlide.setAttribute("aria-hidden", "true"), n.previousSlide.setAttribute("tab-index", "-1"), n.transitionEnd && n.transitionEnd(n);
						const t = n.previousSlide.querySelector("video");
						null !== t && (t.pause(), (t.currentTime = 0));
					}
					(n.transitioning = !1), (n.transitionEndTimer = void 0);
				}, l * t));
		}
		(this.index = o), i || this.progressiveLoad(o), this.progressiveLoad((o + 1 + n.total) % n.total), window.requestAnimationFrame(d);
	}
	progressiveLoad(t, e, i) {
		void 0 === e && (e = !1), void 0 === i && (i = this);
		const s = this.slides[t];
		if (null !== s) {
			var n = Array.prototype.slice.call(s.querySelectorAll("img"));
			n &&
				n.length > 0 &&
				n.forEach((t, s) => {
					if (null != t && !t.classList.contains("heart-loaded") && !t.classList.contains("heart-loading") && null !== t.currentSrc) {
						function n() {
							this.classList.add("heart-loaded"), this.classList.remove("heart-loading"), e && 0 == s && i.kickstart();
						}
						var o;
						if ((t.classList.add("heart-loading"), t.complete && t.naturalWidth > 0)) n.bind(t)();
						else
							(t.onload = n.bind(t)),
								["sizes", "srcset", "src"].forEach(function (e) {
									var i = t.getAttribute("data-" + e);
									i && null == t.getAttribute(e) && (t.setAttribute(e, i), t.setAttribute("data-" + e, ""));
								});
					}
				});
			var o = Array.prototype.slice.call(s.querySelectorAll("video"));
			o &&
				o.length > 0 &&
				o.forEach((s, n) => {
					if (null != s && !s.classList.contains("heart-loaded") && !s.classList.contains("heart-loading")) {
						(s.muted = "muted"), s.removeAttribute("loop");
						const r = ["playsinline", "disablepictureinpicture", "disableremoteplayback", "preload"];
						function o() {
							if (
								(s.classList.add("heart-loaded"),
								s.classList.remove("heart-loading"),
								e && 0 == n && i.kickstart(),
								console.log("%cFinished loading index: " + t, "font-style: italic; font-size: 0.9em; color: #757575; padding: 0.2em;"),
								!1 === i.settings.randomize || "all" !== i.settings.randomize)
							) {
								const t = Array.from(i.slideshowSelector.querySelectorAll("video")),
									e = t.indexOf(s);
								if (e === t.length - 1) return null;
								const n = t[e + 1].closest(".heart-slide");
								if (null !== n) {
									const t = Array.from(i.slides).indexOf(n);
									i.progressiveLoad(t);
								}
							}
						}
						if (
							(r.forEach((t) => {
								if (!s.getAttribute(t)) {
									let e = "";
									"preload" === t && (e = "auto"), s.setAttribute(t, e);
								}
							}),
							(s.onloadstart = () => {
								s.classList.add("heart-loading");
							}),
							(s.oncanplaythrough = o.bind(s)),
							"" == s.src && null !== s.getAttribute("data-src") && ((s.src = s.getAttribute("data-src")), s.removeAttribute("data-src")),
							s.querySelectorAll("source").length > 0)
						) {
							const e = s.querySelectorAll("source");
							let i = 0;
							for (const s of e)
								"" == s.src && null !== s.getAttribute("data-src") && ((s.src = s.getAttribute("data-src")), s.removeAttribute("data-src")),
									(s.onerror = () => {
										i++, this.removeEmptySlideAndReinit(t, i, e.length);
									});
						}
						s.load();
					}
				});
		}
	}
	removeEmptySlideAndReinit(t, e, i) {
		const s = this.slides[t];
		e === i && (this.slideshowSelector.removeChild(s), console.warn("removed slide based on error loading source:", s), this.reset(this.settings), 0 === t && (this.slideshowSelector.classList.add("first-image-loaded"), _this.firstImageLoaded && _this.firstImageLoaded(_this)));
	}
	prevNextHandler(t, e, i) {
		const s = this;
		if (!0 !== s.transitioning)
			!0 === i && s.progressiveLoad(e),
				s.goToSlide(t, i, !1, n),
				setTimeout(
					function () {
						s.transitioning = !1;
					},
					i ? s.settings.manualTransition : s.settings.transition
				);
		else if (!0 === i) {
			s.manualTimeout && clearTimeout(s.manualTimeout), s.originallyPaused || (s.manualTimeout = setTimeout(s.resume(), s.settings.transition + s.settings.delay)), s.progressiveLoad(e);
			var n = !0;
			let t = !1;
			return void s.goToSlide(s.index, i, t, n);
		}
	}
	clearAllTimers() {
		clearTimeout(this.manualTimeout), clearTimeout(this.kickoffTimer), clearTimeout(this.throttleClickResume), clearTimeout(this.videoSlideTimer), clearInterval(this.slideInterval);
	}
	next = function (t, e) {
		void 0 === t && (t = this), void 0 === e && (e = !1);
		var i = (t.index + 1 + t.total) % t.total,
			s = (i + 1 + t.total) % t.total;
		t.prevNextHandler(i, s, e);
	};
	previous = function (t, e) {
		void 0 === t && (t = this), void 0 === e && (e = !1);
		var i = (t.index - 1 + t.total) % t.total,
			s = i;
		t.prevNextHandler(i, s, e);
	};
	resume = function (t) {
		void 0 === t && (t = this), t.settings.paused && (t.settings.paused = !1);
		var e = (t.index + 1 + t.total) % t.total;
		t.settings.progressive &&
			setTimeout(function () {
				t.progressiveLoad((e + 1 + t.total) % t.total);
			}, t.settings.delay),
			t.goToSlide(e),
			(this.slideInterval = setInterval(function () {
				t.next(t, !1);
			}, t.settings.delay + t.settings.transition));
	};
	pause = function (t) {
		void 0 === t && (t = this), t.settings.paused || ((t.settings.paused = !0), this.clearAllTimers());
	};
}
